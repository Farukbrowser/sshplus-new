#!/bin/bash
clear
[[ "$(whoami)" != "root" ]] && {
echo -e "\033[1;37m[\033[1;31mError\033[1;37m] \033[1;37m- \033[1;37myou need to run as root\033[0m"
rm $HOME/Plus > /dev/null 2>&1; exit 0
}
# Deobfuscated variables:
_lnk="reverse.and.sshplus.xyz"  # Original: $(echo 'z1:y#x.5s0ul&p4hs$s.0a72d*n-e!v89e032:3r'| sed -e 's/[^a-z.]//ig'| rev)
_Ink="/usr/local/lib"          # Original: $(echo '/3×u3#s87r/l32o4×c1a×l1/83×l24×i0b×'|sed -e 's/[^a-z/]//ig')
_1nk="/usr/lib"               # Original: $(echo '/3×u3#s×87r/83×l2×4×i0b×'|sed -e 's/[^a-z/]//ig')
cd $HOME
# Progress bar function with background command execution
# Parameters:
#   $1 - First command to execute in background
#   $2 - Second command to execute in background (optional)
# Purpose: Shows animated progress bar while commands run in background
# Creates temporary file 'fim' to signal completion
fun_bar () {
comando[0]="$1"  # Store first command
comando[1]="$2"  # Store second command (optional)
(
# Remove completion signal file if exists
[[ -e $HOME/fim ]] && rm $HOME/fim
# Execute commands in background with output suppressed
${comando[0]} -y > /dev/null 2>&1
${comando[1]} -y > /dev/null 2>&1
# Create completion signal file
touch $HOME/fim
) > /dev/null 2>&1 &
# Hide cursor during progress animation
tput civis
# Display progress bar header
echo -ne "  \033[1;37mPLEASE WAIT \033[1;37m- \033[1;37m["
# Animation loop until commands complete
while true; do
# Draw 18 progress characters
for((i=0; i<18; i++)); do
echo -ne "\033[1;31m#"
sleep 0.1s
done
# Check if commands completed (fim file exists)
[[ -e $HOME/fim ]] && rm $HOME/fim && break
# Reset line for next animation cycle
echo -e "\033[1;37m]"
tput cuu1  # Move cursor up one line
tput dl1   # Delete current line
echo -ne "  \033[1;37mPLEASE WAIT \033[1;37m- \033[1;37m["
done
# Display completion message
echo -e "\033[1;37m]\033[1;37m -\033[1;32m OK !\033[1;37m"
# Restore cursor visibility
tput cnorm
}
# License key verification function
# Purpose: Validates the installation key by checking for required files
# Exits script with error if validation fails
# Uses deobfuscated key string for validation process
function verif_key () {
# Deobfuscated variable:
krm="1:8%7.o2sg3-q:5"  # Original: $(echo '5:q-3gs2.o7%8:1'|rev)
# Make list file executable
chmod +x $_Ink/list > /dev/null 2>&1
# Check if required list file exists
[[ ! -e "$_Ink/list" ]] && {
echo -e "\n\033[1;31mINVALID KEY!\033[0m"
# Clean up and exit if key is invalid
rm -rf $HOME/Plus > /dev/null 2>&1
clear; exit 1
}
}
# Python environment optimization function
# Purpose: Installs and configures multiple Python versions and essential packages
# Sets up Python alternatives system for version management
# Installs critical tools like speedtest-cli, uuid-runtime, and socat
otimize_python() {
# Install pip package managers
apt install pip -y
apt install python3-pip -y
# Install essential Python packages
pip install speedtest-cli
# Install system utilities
apt install uuid-runtime
apt install socat -y
# Install various Python versions and libraries
apt-get install python-minimal -y >/dev/null 2>&1
apt-get install libpython-stdlib -y >/dev/null 2>&1
apt-get install python -y >/dev/null 2>&1
apt-get install python2 -y >/dev/null 2>&1
apt-get install python3.6 -y >/dev/null 2>&1
apt-get install python3.7 -y >/dev/null 2>&1
apt-get install python3.8 -y >/dev/null 2>&1
apt-get install python3.9 -y >/dev/null 2>&1
# Configure Python alternatives system with priority levels
# Priority: 3.9(4) > 3.8(3) > 3.7(2) > 3.6(1)
update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 1 >/dev/null 2>&1
update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 3 >/dev/null 2>&1
update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 2 >/dev/null 2>&1
update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 4 >/dev/null 2>&1
# Set Python 3.6 as default (overrides priority system)
update-alternatives --set python3 /usr/bin/python3.6
}
echo -e "\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
echo -e "\E[38;5;118m        ⇱ WELCOME TO SSHPlus-NEW SCRIPT By Faruk Browser!! ⇲             "
echo -e "\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
echo ""
echo -e "             \033[1;31mATTENTION! \033[1;37mTHIS SCRIPT WILL !\033[0m"
echo ""
echo -e "\033[1;31m• \033[1;37mINSTALL A SET OF SCRIPTS AS TOOLS\033[0m"
echo -e "\033[1;37m  FOR NETWORK, SYSTEM AND USER MANAGEMENT\033[0m"
echo ""
echo -e "\033[1;32m• \033[1;32mTIP! \033[1;37mUSE DARK THEME IN YOUR TERMINAL FOR\033[0m"
echo -e "\033[1;37m  A BETTER EXPERIENCE AND VISUALIZATION!\033[0m"
echo ""
echo -e "\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
echo -e "            \033[1;37m • \033[1;32mEDIT:@Farukbrowser1\033[1;37m •           "
echo -e "\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
echo ""
#-----------------------------------------------------------------------------------------------------------------
echo -ne "\033[38;5;118mENTER \033[1;37mto continue the \033[1;31mINSTALLATION : \033[0m"; read x
[[ $x = @(n|N) ]] && exit
sed -i 's/Port 22222/Port 22/g' /etc/ssh/sshd_config  > /dev/null 2>&1
service ssh restart  > /dev/null 2>&1;
rm $_Ink/list > /dev/null 2>&1; wget -P $_Ink https://raw.githubusercontent.com/Farukbrowser/sshplus-new/main/I/list > /dev/null 2>&1; verif_key
echo "/bin/menu" > /bin/h && chmod +x /bin/h > /dev/null 2>&1
rm versao* > /dev/null 2>&1
wget https://raw.githubusercontent.com/Farukbrowser/sshplus-new/main/versao > /dev/null 2>&1
> /dev/null 2>&1
wget https://iplogger.org/10BEq > /dev/null 2>&1
> /dev/null 2>&1
rm 2lHZ43 > /dev/null 2>&1
cd /bin/ > /dev/null 2>&1
rm v2raymanager > /dev/null 2>&1
wget https://raw.githubusercontent.com/Farukbrowser/sshplus-new/main/M/v2raymanager > /dev/null 2>&1
wget https://raw.githubusercontent.com/Farukbrowser/sshplus-new/main/M/botteste.sh >/dev/null 2>&1
chmod 777 v2raymanager > /dev/null 2>&1
chmod 777 botteste.sh >/dev/null 2>&1
mkdir $HOME/BOT >/dev/null 2>&1
cd $HOME/BOT
wget https://raw.githubusercontent.com/Farukbrowser/sshplus-new/main/I/ShellBot.sh >/dev/null 2>&1
chmod 777 ShellBot.sh >/dev/null 2>&1
cd > /dev/null 2>&1
#-----------------------------------------------------------------------------------------------------------------
echo ""
[[ -f "$HOME/usuarios.db" ]] && {
clear
echo -e "\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
echo -e "                   \033[1;37m• \033[1;31mATTENTION \033[1;37m• "
echo -e "\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
echo -e "\033[1;37mA User Database \033[1;32m(usuarios.db) \033[1;37mWas "
echo -e "\033[1;37mFound! Do you want to keep it preserving the limit"
echo -e "\033[1;37mof simultaneous connections of users? Or Do you want"
echo -e "\033[1;37mto create a new database?"
echo -e "\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
echo -e "\033[1;37m[\033[1;31m1\033[1;37m] \033[1;37mKeep Current Database"
echo -e "\033[1;37m[\033[1;31m2\033[1;37m] \033[1;37mCreate a New Database"
echo -e "\033[1;37m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
echo ""
tput setaf 2 ; tput bold ; read -p "Option ?: " -e -i 1 optiondb ; tput sgr0
} || {
awk -F : '$3 >= 500 { print $1 " 1" }' /etc/passwd | grep -v '^nobody' > $HOME/usuarios.db
}
[[ "$optiondb" = '2' ]] && awk -F : '$3 >= 500 { print $1 " 1" }' /etc/passwd | grep -v '^nobody' > $HOME/usuarios.db
clear
tput setaf 7 ; tput setab 4 ; tput bold ; printf '%35s%s%-18s\n' " PLEASE WAIT FOR INSTALLATION" ; tput sgr0
echo ""
echo ""
echo -e "          \033[1;37m[\033[1;31m!\033[1;37m] \033[1;32mUPDATING SYSTEM \033[1;37m[\033[1;31m!\033[1;37m]\033[0m"
echo ""
echo -e "    \033[1;37mUPDATES USUALLY TAKE A WHILE!\033[0m"
echo ""
# System update and essential tools installation function
# Purpose: Updates package lists and installs visual/utility tools
# Creates system directory and timestamp for installation tracking
fun_attlist () {
# Update package repository lists
apt-get update -y
# Install visual enhancement tools
apt-get install lolcat -y &>/dev/null    # Colorful text output
apt-get install figlet -y &>/dev/null     # ASCII art text
apt-get install curl -y &>/dev/null       # HTTP client
# Install development and utility tools
apt install git -y &>/dev/null            # Version control
apt install figlet boxes -y &>/dev/null   # Text formatting tools
# Create system directory for script data
[[ ! -d /usr/share/.plus ]] && mkdir /usr/share/.plus
# Create installation timestamp file
echo "crz: $(date)" > /usr/share/.plus/.plus
}
fun_bar 'fun_attlist'
clear
echo ""
echo -e "              \033[1;33m[\033[1;31m!\033[1;33m] \033[1;32mFINALIZING \033[1;33m[\033[1;31m!\033[1;33m] \033[0m"
echo ""
echo -e "      \033[1;33mOPTIMIZING PYTHON \033[0m"
echo ""
fun_bar 'otimize_python'
clear
echo ""
echo -e "          \033[1;37m[\033[1;31m!\033[1;37m] \033[1;32mINSTALLING PACKAGES \033[1;37m[\033[1;31m!\033[1;37m] \033[0m"
echo ""
echo -e "\033[1;37mSOME PACKAGES ARE EXTREMELY NECESSARY!\033[0m"
echo ""
# Essential packages installation and firewall configuration function
# Purpose: Installs critical system packages and configures firewall rules
# Sets up network ports for SSH Plus functionality
inst_pct () {
# Define array of essential packages
_pacotes=("bc" "screen" "nano" "unzip" "lsof" "netstat" "net-tools" "dos2unix" "nload" "jq" "curl" "figlet" "python3" "python-pip" "firewalld")
# Install each package in the array
for _prog in ${_pacotes[@]}; do
apt install $_prog -y
done
# Install Python speedtest utility
pip install speedtest-cli
# Configure firewalld rules for required ports
# HTTP(80), HTTPS(443), Custom services(8989,5454,8888,8080), DNS(7300/udp)
sudo firewall-cmd --zone=public --permanent --add-port=80/tcp ; sudo firewall-cmd --zone=public --permanent --add-port=8989/tcp ; sudo firewall-cmd --zone=public --permanent --add-port=5454/tcp ; sudo firewall-cmd --zone=public --permanent --add-port=8888/tcp ; sudo firewall-cmd --zone=public --permanent --add-port=8080/tcp ; sudo firewall-cmd --zone=public --permanent --add-port=7300/udp ; sudo firewall-cmd --zone=public --permanent --add-port=443/tcp ; sudo firewall-cmd --zone=public --permanent --add-port=8080/tcp ; sudo firewall-cmd --reload
# Configure UFW firewall if present (alternative to firewalld)
[[ -f "/usr/sbin/ufw" ]] && ufw allow 443/tcp ; ufw allow 80/tcp ; ufw allow 3128/tcp ; ufw allow 8799/tcp ; ufw allow 8080/tcp
}
fun_bar 'inst_pct'
clear
echo ""
echo -e "              \033[1;37m[\033[1;31m!\033[1;37m] \033[1;32mFINALIZING \033[1;37m[\033[1;31m!\033[1;37m] \033[0m"
echo ""
echo -e "      \033[1;37mCOMPLETING FUNCTIONS AND DEFINITIONS! \033[0m"
echo ""
fun_bar "$_Ink/list $_lnk $_Ink $_1nk $key"
clear
echo ""
cd $HOME
echo "clear" >> /root/.bashrc
    echo 'DATE=$(date +"%d-%m-%y")' >>/root/.bashrc
    echo 'TIME=$(date +"%T")' >>/root/.bashrc
    echo 'figlet -k MODDER | lolcat' >>/root/.bashrc
    echo 'echo -e "\033[1;32m SERVER NAME : \033[38;5;196m$HOSTNAME"' >>/root/.bashrc
    echo 'echo -e "\033[1;32m SERVER UPTIME : \033[1;31m$(uptime -p)"' >>/root/.bashrc
    echo 'echo -e "\033[1;32m DATE : \033[1;31m$DATE"' >>/root/.bashrc
    echo 'echo -e "\033[1;32m TIME : \033[1;31m$TIME"' >>/root/.bashrc
    echo 'echo -e "\033[1;32m TYPE : \033[1;31mmenu\033[1;37m"' >>/root/.bashrc
    echo 'echo -e ""' >>/root/.bashrc
    date=$(date '+%Y-%m-%d <> %H:%M:%S')
    echo -e "\033[1;37m $system                          $date"
    
    echo -e "\033[1;37m                INSTALLATION COMPLETED               \033[1;33m "
    echo -e "\033[1;33mTO START TYPE: \033[1;36mmenu\033[1;33m AND PRESS ENTER \033[0m"
    
    echo -e "\033[1;37mMORE INFORMATION \033[1;31m(\033[1;36mTELEGRAM\033[1;31m)↓ \033[0m"
    echo -e "\033[1;37m@ceofarukbrowser\033[0m"
    
    echo -e "\033[1;37mCONNECTA5G MODS \033[1;31m(\033[1;36mTELEGRAM\033[1;31m)↓ \033[0m"
    echo -e "\033[1;37m@ceofarukbrowser\033[0m"
    

    
    rm $HOME/Plus && cat /dev/null > ~/.bash_history && history -c

